Day 7
Exercises

- Creating new table with PK FK, set operations and sub queries on predefined table
- Hop-on session on Table Design  (new tables to be designed with existing scenario)

- Activity 1 
	Define PK for StudentDetails table. And try searching with ID and then Email ID (Hint ask them to create an index and ask them to explain the need of index).


ALTER Table StudentDetails 
Change id id int not null Primary key;


SELECT * from StudentDETAILS  WHERE  id=2;

SELECT * from StudentDETAILS  WHERE  email="amalg@gmail.com";


- Activity 2
Design and Create New Table Marks 
Hint : we need to check how the candidate normalizes the table based on need

Here ID should be FK from StudentDetails table
(ID,  Subject,  Marks)

Create Table Marks(
ID int not null auto_increment,
Subject varchar(11) not null,
Marks int  ,
Foreign KEY(ID) REFERENCES StudentDetails(id) ON DELETE CASCADE
);

- Activity 3
List first name , subject, mark, Std of the students whose marks is greater than 90% in any Subject of the current academic year. (hint check for Joins)

Select FirstName,Subject,Marks,Std from
Marks Inner join StudentDETAILS on StudentDetails.id =Marks.id And Marks>90 and  AcadamicYear =Year(Now());


- Activity 4
Implement the above using sub query (hint check for sub query if 3 is used via join or vice versa)

Select FirstName,Std from StudentDETAILS where(id) in (SELECT id from marks  where Marks>90 and  AcadamicYear =Year(Now()));


- Activity 5
Delete a student entry and ensure their marks are also deleted.

DELETE FROM StudentDETAILS
WHERE FirstName ="ANEESH";

#On Delete Cascade must be used while creating


- Activity 6
Design one or more extra tables for the Student Database on your own and come up with PK FK and other relationships

Create Table Elective
(
id int NOT NULL UNIQUE ,
name varchar(100) NOT NULL,
Primary Key (id)
)


ALTER Table StudentDetails 
ADD COLUMN ElectiveId int,
Add Foreign Key (ElectiveId) References Elective(Id) On Delete Cascade;



- Activity 7
Find students for whom no marks have been entered.( hint left join)

Select StudentDetails.* from StudentDETAILS left join Marks on StudentDetails.id =Marks.id where marks.marks is null;


- Activity 8
List first name , subject, mark, Std of the students whose marks is greater than 90% in two Subjects of the current academic year and previous academic year. (hint check for Joins, set operation)

SELECT s.firstName,ma.Subject,ma.marks,s.std from StudentDetails s inner join marks ma on s.id = ma.id where s.id in (
Select M.id from Marks M where M.marks>90 and  m.AcadamicYear =YEAR (NOW()) GROUP BY m.ID HAVING  COUNT(m.id)>1
INTERSECT 
Select M.id from Marks M where M.marks>90 and  m.AcadamicYear =YEAR (NOW())-1 GROUP BY m.ID HAVING  COUNT(m.id)>1);

- Activity 9
Add marks of every subject of each student and then,
- Find which student scored the highest total mark in the current academic year of std X
- Find which student scored the lowest total mark in the current academic year of std X

#Highest
Select Marks.ID ,FirstName,Sum(Marks) as Total from
Marks Inner join StudentDETAILS on StudentDetails.id = Marks.id AND AcadamicYear = Year(Now()) AND StudentDetails.Std =10 GROUP  by Marks .id order by total desc limit 1;

#Lowest
Select Marks.ID ,FirstName,Sum(Marks) as Total from
Marks Inner join StudentDETAILS on StudentDetails.id = Marks.id AND AcadamicYear = Year(Now()) AND StudentDetails.Std =10 GROUP  by Marks .id order by total asc limit 1;

